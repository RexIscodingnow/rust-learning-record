Rust 學習

副檔名: 名稱.rs

一、 基本設置 與 Cargo 命令

創建 rust 專案  ==>  Cargo

1. 創建程式碼 (或叫代碼)、下載依賴的程式庫
2. 命令行
    
    2-1. 版本查詢 => cargo --version
    2-2. 專案新增 => cargo new 專案 (資料夾)
    2-3. 構建 (編譯) Cargo 項目 => cargo build
            2-3-1. 創建可執行檔案 => 目標路徑: ./target/debug/檔名.exe  (Windows)
            2-3-2. 執行編譯執行檔 => 目標路徑: ./target/debug/檔名.exe  (Windows)

    2-4. 構建 (編譯) 和 執行 => cargo run

    2-5. 第一次編譯，會生成 Cargo.lock 的檔案

    2-6. 檢查程式碼 (確認能通過編譯) => cargo check
            2-6-1. 用來確認是否可編譯通過，"但不會生成 執行檔案"
    
    2-7. 為發布構建 => cargo build --release
            2-7-1. 編譯時，會進行優化。執行速度會更快，但是編譯時間更長
            2-7-2. 生成的路徑會在 target/release 底下，而不是 target/debug 生成
            2-7-3. 編譯配置有兩種
                        1. 開發中
                        2. 正式發布 (該命令，屬於這類型)

3. 其他檔案

    3-1. 生成檔案
            |--> 1. src 資料夾 => 存放 rust 程式碼
            |
            |--> 2. Cargo.toml => Cargo 的配置檔案
            |                               |--> [package]
            |                               |       |--> 說明: 一個區域標題，下方內容是用來配置包 (package) 的
            |                               |       |
            |                               |       |--> name: 項目名稱
            |                               |       |--> version: 版本
            |                               |       |--> authors: 項目作者
            |                               |       |--> edition: 使用的 Rust 版本
            |                               |
            |                               |--> [dependencies]
            |                               |       |--> 說明: 另一個區域的開始，這個會列出項目的依賴項
            |                               |
            |                               |--> 在 Rust 裡面，程式庫 (代碼包) 稱作 crate
            |
            |--> 3. gitignore => git 倉庫
            |
            |--> 4. Cargo.lock => 負責追蹤項目依賴的 精確版本，"不需要手動修改該檔案"
            |
            |--> 5. target 資料夾 => 編譯生成檔案都在這裡


二、 Rust 語法

1. 程式進入點 (entry point)
    1-1. 長這樣 (如下)
			fn main() {
				執行區
			}
	1-2. 

2. 宣告變數
    2-1. 常數(量) (不可變動)
            let 變數名 = 值;   // immutable
    
    2-2. 一般變數 (可變動)
            let mut 變數名 = 值;

3. 印出訊息 => println!( 資料 );
    3-1. 印出變數值 => println!("輸出字串 {}, {}", 變數 1, 變數 2);
            3-1-1. 說明: 在 println! 的 " " 號內，有 {} 號


4. 取得用戶輸入
    4-1. 預導入 (preiude) 程式庫 => use std::io;
    4-2. 讀取輸入資料 => io::stdin().read_line(&mut 變數名).expect("讀取失敗");
            4-2-1. 取得用戶輸入: stdin().read_line()
            4-2-2. 返回值: 1. Ok + 結果值
			   2. Err + 失敗原因
			   3. expect() : 若返回值為 Err，則中斷當前運作，且把傳入的字串顯示出來
					 反之，Ok 則是提取 附加的值，作為結果返回給使用者

    4-3. 返回字串型別 的實例 => let mut 變數名 = String::new();
            4-3-1. String => "資料型別"，由標準函式庫提供，具有可變長度的文字
            4-3-2. ::new() => 創建新實例的函式，其中的 :: 號，因為它是一個特定型別的 關聯函式
								也就是說，它是 被關聯到 String 本身，而非是 String 的實例
										(簡單來說: 不是只有 String 才有的)
								
								** 註: 這邊的實體 (實例)，好比像其他語言的`「靜態方法」

            4-3-3. 編碼: UTF-8