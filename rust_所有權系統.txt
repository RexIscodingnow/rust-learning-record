三、 Rust 的核心特性: 所有權    (附註: "記憶體" 在以下內容，簡稱為: 內存)

1. 簡介: 所有程序在運行時，都必須管理 使用記憶體的方式

    1-1. 有些語言有 垃圾回收機制 (Garbage Collection)，它們會不斷尋找不再使用的記憶體
            ex: C#
    1-2. 而其他語言，必須 明確(手動) 分配與釋放記憶體
            ex: C/C++
    
    1-3. 不過 Rust 比較獨特，它讓 Rust 無需 Garbage Collection 就可以保證記憶體安全
         透過一個所有權系統來管理記憶體，其中包括一組編譯器在編譯時檢查的規則
         當程式執行時，所有權系統 "不會減慢運行速度"，因為 Rust 把這些工作提前到編譯時管理

2. Stack VS Heap

    2-1. Stack 介紹: 按順序接收資料儲存，按相反方向取出資料 (移除)
                        (特性: First In Last Out (簡稱: FILO)，先進後出)
            所有儲存在 Stack 上的資料必須是 "已知的固定大小"

    2-2. Heap 介紹: 編譯時，大小未知的資料，或是執行時資料大小會發生變化的，存放 Heap 上

            Heap 的記憶體組織性差一些，當資料放入 Heap 時會請求一定大小的空間
            當操作系統在 Heap 裡找到一個足夠大的空間，把它標記為在用，並返回一個指標，
            也就是 "記憶體位址" (學過 C/C++ 應該知道吧......)
            
            過程是在 Heap 上分配，稱為 "分配"

    2-3. 兩者比較

        2-3-1. Stack: 比 Heap 相對快得多
                由於 Stack 是已知固定大小，是 "分配"
                不過 指標 是已知固定大小，可以放入 Stack
                但是要 取得實際資料，必須用指標來取值

                因為操作系統不需要 尋找用來儲存新的資料的空間，只要從 Stack 頂端操作
        
        2-3-2. Heap: 分配空間，所需的工作較多
                而操作系統，需要先找到足夠大的空間來存放，並做好紀錄方便下次分配

    2-4. 存取資料
        
        2-4-1. 存取 Heap 比 Stack 慢，因為需要透過 指標 才能找到 Heap 中的資料
        2-4-2. 資料存取距離比較近，處理速度上會更快一些 (Stack)
        2-4-3. 反之，存放距離比較遠，速度上會慢一些 (Heap)
                    註: Heap 在分配大量的空間，也是需要時間

3. 所有權規則
    3-1. 每個值都有一個變數，這個變數是該值的所有者
    3-2. 每個值同時只能有一個所有者
    3-3. 當所有者 超出作用域 (scope) 時，該值將被刪除
                註: 作用域 (scope)，為 "變數的有效範圍"

4. String 類型

    4-1. String 比基本資料型別更複雜
    4-2. 字串字面值: 在程式裡手寫的字串值，它們是不可變的，是已經寫死在程式裡面
                        (主要是因為在編譯時，就已經分配好在 Stack 上)
    4-3. Rust 還有第二種字串類型: String
            在 Heap 上分配，能儲存在編譯時 "未知數量的文本"

    4-4. 宣告 String 類型的值
            4-4-1. 可以使用 from 函式從字串字面值，來宣告 String 類型
            
            示例:
                 1 | let s = String::from("hello world");    // :: 號表示 from 是 String 類型底下的函式
            
            4-4-2. 這類的 字串是可以被修改的

5. 內存 和 分配

    5-1. 字串字面值，是因為在編譯時，就已經知道內容大小，其文本內容直接硬編碼到最終可執行檔案
            因此速度快、高效，是因為 不可變性
    
    5-2. String 類型，為了支持可變性，需要在編譯時在 Heap 上分配未知大小的內存
            因此作業系統必須在運行時請求內存
                -- 在 String::from 來請求內存
            當用完 String 之後，需要將內存返回給作業系統
                -- 在擁有 GC 的語言中，GC 會跟蹤清理不再使用的內存
                -- 而沒有 GC 機制，就需要自己去識別內存何時不再使用，並調用代碼將其返回
                        1. 如果忘記釋放，則是浪費記憶體
                        2. 如果提前釋放，該變數就會變成非法
                        3. 如果做了兩次，也就是 Bug，則必須分配一次對應釋放一次

    5-3. 而 Rust 則採用了不同的方式，對於某些值，也就是當變數走出作用域(scope) 時，
                內存會立即 "自動交還給作業系統"
                
                -- 自動呼叫一個特殊函式: drop

    5-4. 變數與資料 的交互方式 => 移動 (Move)
            5-4-1. 說明: 多個變數可以與同一個資料，使用一種獨特的方來進行交互
            
            5-4-2. 整數資料示例

                示例:
                        1 | let x = 5;
                        2 | let y = x;

                說明: 整數是已知的且固定大小的數值，把這兩個 5 被壓到 Stack 中，
                        把 x 的值複製一份給 y

            5-4-3. String 類型示例

                示例:
                        1 | let s1 = String::from("hello");
                        2 | let s2 = s1;
                        3 | println!("s1: {}, world", s1);   // s1 離開 scope，視為無效，使用不了
                        4 | 
                        5 | println!("s2: {}, world", s2);
                   
                說明: 1. 一個 String 由 3 個部分組成
                                1. ptr: 一個指向存放字串內容的內存指標
                                2. len: 一個長度
                                3. capacity: 一個容量

                                -- 上方這 3 個部分放在 Stack 上
                                -- 存放字串內容的部分，在 Heap 上
                                -- 長度 len，就是存放字串內容所需要的字節數
                                -- 容量 capacity 是指 String 從作業系統總共獲得內存的總字節數

                      2. 當 s1 指派到 s2 時，String 的資料複製了一份:
                                -- 在 Stack 上複製一份 指標、長度、容量
                                -- 並沒有複製指標指向 Heap 上的資料
                      
                      3. 當變數離開 scope 時，Rust 會自動調用 drop 的函式，
                                將變數使用的 Heap 內存釋放
                         因此當 s1, s2 離開 scope 時，它們都會嘗試釋放相同內存
                                -- 二次釋放 (double free) Bug

                      4. 為了保證內存安全
                                -- Rust 沒有嘗試複製 被分配的內存
                                -- Rust 讓 s1 失效，也就是當 s1 離開 scope，Rust 不需要釋放任何東西

                圖示:
                              "s1"                 * Heap 上的資料 *           "s2"
                        | name     |val|           | index | val |      | name     |val|
                        |----------|---|           |-------|-----|      |----------|---|
                        | ptr      | --|---------> |   0   |  h  |      | ptr      | --|----> * Heap 上的資料 *
                        |----------|---|           |-------|-----|      |----------|---|        (參照左邊欄位)
                        | len      | 5 |           |   1   |  o  |      | len      | 5 |
                        |----------|---|           |-------|-----|      |----------|---|
                        | capacity | 5 |           |   2   |  l  |      | capacity | 5 |
                        |----------|---|           |-------|-----|      |----------|---|
                                                   |   3   |  l  |
                                                   |-------|-----|
                                                   |   4   |  o  |
                                                   |-------|-----|
            
            5-4-4. 所有權轉移(Move) 判斷基準
                
                1. 根據上方的 String 類型示例，將 s1 移動(Move) 到 s2
                   
                   ** 如果以其他語言來看，看起來像是把 "hello" 這個字串，複製一份過去 **
                   ** 而且 s1 與 s2 都可以使用，並不會編譯報錯 **
                                                -- C/C++, C#, Java, Python, ...之類的
                   
                   但在 Rust 的字串的資料結構(組成方式) *以字串為例子*
                        1. 一種是寫死固定: 字串字面值
                        2. 另一種是，可大小可變: String 類型
                   
                   第一種，因為是寫死固定(已知固定大小)，所以視為 複製特徵(Copy trait)，
                                因此賦值給其他變數，仍然可以使用

                   第二種，因為有在 Heap 上分配空間使用，視為可彈性大小，由於長度不定，
                            因此不視為 Copy trait，而是轉移該變數的所有權
                        
                        ** 把 s1 的資料複製到 s2，由於 s1 離開 scope，因此該變數也就視為無效 **
                
                總結: 在是否會發生所有權轉移(Move) 的時候，要看該變數是不是為 Copy trait，
                        若不是 Copy trait 而會轉移該變數的所有權


                2. 這裡有兩個專有名詞，有關於 Copy 的部分

                        2-1. 淺複製 / 淺拷貝 (shallow Copy)
                        2-2. 深複製 / 深拷貝 (deep Copy)

                        第一種，一般會將複製 指標、長度、容量 視為: 淺複製/淺拷貝，
                        但由於 Rust 讓 s1 失效，所以用 移動(Move)，比較合適

                        第二種，在 Rust 有一個隱含的設計原則: 不會自動創建資料的 深複製/深拷貝
                                -- 就運行時性能而言，任何自動賦值的操作都是廉價的

    5-5. 變數與資料 的交互方式 => 複製 / 克隆 (clone)
        
            5-5-1. 如果要對 Heap 上的 String 進行深度拷貝/複製，而不僅僅是 Stack 上的資料，
                        則可以使用 clone() 方法
                        
                示例:
                        1 | let s1 = String::from("hello");
                        2 | let s2 = s1.clone();
                        3 | println!("s1: {}, s2: {}", s1, s2);

    5-6. Stack 上的資料: 複製
            
            5-6-1. Copy trait: 可以用於像是整數資料，完全存放在 Stack 上面
            5-6-2. 如果某一個資料實現了 Copy 這個 trait，那麼舊變數的資料在賦值後，仍然可以繼續使用
            5-6-3. 如果某一個資料或是該資料的一部分，實現了 Drop trait，
                        那麼 Rust 則不允許讓它實現 Copy trait
            
    5-7. 一些擁有 Copy trait 的資料型態
            
            5-7-1. 任何簡單的組合資料型態，是可以 Copy 的
            5-7-2. 任何需要分配內存，或某些資源的都不是 Copy
            5-7-3. 一些擁有 Copy trait 的資料型態
                        1. 所有的整數型別: i32, u32
                        2. 布林值: bool
                        3. 字元: char
                        4. 所有的浮點數型別: f64
                        5. 元組 (Tuple)，如果 Tuple 內的資料都是 Copy 的
                                -- (i32, i32) 是
                                -- (i32, String) 不是


6. 所有權 與 函式
    
    6-1. 將值傳遞給函式 和 把值賦值變數 是類似的
                -- 將值傳遞給函式，將會發生移動或者複製
                
                示例:
                        1 | fn main() {
                        2 |     let s1 = String::from("hello");   // 進入 s1 的 scope
                        3 |     take_ownership(s1);   // s1 的所有權移動到 take_ownership() 內
                        4 | }
                        5 | 
                        6 | fn take_ownership(str: String) {
                        7 |     println!("{}", str);
                        8 | }   // str 的 scope 結束

    6-2. 返回值 與 作用域
            6-2-1. 當函式在返回值的過程中，同樣也會發生所有權轉移
            6-2-2. 一個變數的所有權總是遵循同樣的方式
                        1. 把一個值賦值給其他變數會發生移動
                        2. 當一個含有 Heap 資料的變數離開作用域時，它的值就會被調用的 drop 函式清理掉，
                                除非資料的所有權被轉移到另一個變數上

                示例:
                        1 | fn give_ownership() -> String {
                        2 |     let s = String::from("hello");
                        3 |     s
                        4 | }
                        5 | 
                        6 | fn takes_and_give(str: String) -> String {
                        7 |     str
                        8 | }
                        9 | 
                       10 | fn main() {
                       11 |     let s1 = give_ownership();   // give_ownership() 的內部，s 的所有權移動到 s1
                       12 |     let s2 = takes_and_give(s1);   // s1 又移動到 s2
                       13 | }

    6-3. 如何讓函式使用數值時，但不會獲得其所有權
                -- 參考 與 借用 (Reference and Borrowing)
                                        -- by 第 7 條


7. 參考 與 借用 (Reference and Borrowing)

    7-1. 函式的參數使用 & 符號
    7-2. & 符號是代表: 參考 (Reference)，它就是允許使用傳入的數值，且不取得其所有權
    7-3. 借用 (Borrowing) 與 不可變參考 (immutable Reference):
                7-3-1. 當把參考 (Reference) 作為函式參數，這個行為叫做借用 (Borrowing)
                7-3-2. 和宣告變數時一樣，在預設的情況下，引用是不可變的
                        -- 1. 因此預設是不可修改借用 (Borrowing) 的值
                        -- 2. 若要修改借用 (Borrowing) 的值，則是宣告第二種參考
                                        -- 可變參考 (mutable Reference)

                示例:
                        1 | fn main() {
                        2 |     let s = String::from("hello");
                        3 |     let s_len = get_string_len(s);
                        4 | }
                        5 | 
                        6 | fn get_string_len(str: &String) -> usize {
                        7 |     // str.push_str(", world");   // 這邊會報錯，得必須是可變參考
                        8 |     str.len()
                        9 | }

                圖示:
                              s                   "s1"                 * Heap 上的資料 *
                        | name  |val|       | name     |val|           | index | val |
                        |-------|---|       |----------|---|           |-------|-----|
                        | ptr   |---|------>| ptr      | --|---------> |   0   |  h  |
                        |-------|---|       |----------|---|           |-------|-----|
                                            | len      | 5 |           |   1   |  o  |
                                            |----------|---|           |-------|-----|
                                            | capacity | 5 |           |   2   |  l  |
                                            |----------|---|           |-------|-----|
                                                                       |   3   |  l  |
                                                                       |-------|-----|
                                                                       |   4   |  o  |
                                                                       |-------|-----|

    7-4. 可變參考 (mutable Reference)
                7-4-1. 可變參考: 在 & 符號後面加上 mut 關鍵字
                7-4-2. 限制: 
                            1. 可變參考有一個重要限制，在特定的 scope 內，
                                對於某一塊的資料，只能有一個可變參考
                                        -- 這樣限制的好處是在編譯時，防止數據競爭
                            
                            2. 不可變參考與可變參考，不能同時存在同一個 scope，
                                        但不可變參考，可以同時存在

                7-4-3. 可以透過 "創建新的 scope"，來允許非同時的創建多個可變參考

                ** 數據競爭，在滿以下 3 個條件，可能會發生 **
                        1. 兩個或多個以上的指標，同時訪問同一個資料
                        2. 至少有一個指標用於寫入資料
                        3. 沒有使用任何機制，來同步對資料的訪問

                示例 1: 宣告 & 使用可變參考

                        1 | fn main() {
                        2 |     let mut s = String::from("hello");
                        3 |     let s_len = get_string_len(&mut s);
                        4 | }
                        5 | 
                        6 | fn get_string_len(str: &mut String) -> usize {
                        7 |     str.push_str(", world");
                        8 |     str.len()
                        9 | }

                示例 2: 非同時的創建多個可變參考

                        1 | fn main() {
                        2 |     let mut s = String::from("hello");
                        3 |     {
                        4 |         // 由於創建新的 scope，因此可以再創建一個可變參考
                        5 |         let s1 = &mut s;
                        6 |     }
                        7 | 
                        8 |     let s2 = &mut s;
                        9 | }


                示例 3: 不可變參考與可變參考，不能同時存在; 但不可變參考，可以同時存在

                        1 | fn main() {
                        2 |     let mut s = String::from("hello");
                        3 |     let r1 = &s;   // 沒問題
                        4 |     let r2 = &s;   // 沒問題
                        5 |     let r3 = &mut s;   // 很有問題，出事了!
                        6 | }

                示例 4: 承示例 3 的程式碼，當 r1, r2 的 scope 結束，那宣告 r3 的可變參考，是沒有問題的

                        1 | fn main() {
                        2 |     let mut s = String::from("hello");
                        3 |     let r1 = &s;   // 沒問題
                        4 |     let r2 = &s;   // 沒問題
                        5 |     println!("s1: {}, s2: {}", s1, s2);   // 變數 r1, r2 的作用域結束
                        6 |     // r1, r2 將不再使用
                        7 | 
                        8 |     let r3 = &mut s;   // 沒問題
                        9 | }

    7-5. 迷途參考/懸空引用 (Dangling Reference)
                7-5-1. 懸空指標 (Dangling Pointer):
                                -- 一個指標指向了記憶體中的某個地址，而這個
                                地址可能已經被釋放掉，並分配給其他程序使用了

                7-5-2. 在 Rust 編譯時，可保證該變數參考，永遠都不是迷途參考，
                        如果使用某些資料的參考，而編譯器會確保該資料，
                        不會在參考結束前，離開作用域 (scope)

                示例:
                        1 | fn main() {
                        2 |     let s = dangling();
                        3 | }
                        4 | 
                        5 | fn dangling() -> &String {
                        6 |     let s = String::from("hello");
                        7 |     &s
                        8 | }

    7-6. 參考的規則
                1. 在任何給定的時候，只能滿足下列的條件之一
                        -- 一個可變參考
                        -- 任意數量的不可變參考
                
                2. 參考必須一直有效


8. 切片 (Slice)

    8-1. 在 Rust 的另一種不持有所有權的資料類型: 切片 (Slice)
         
         Rust 的切片 (Slice) 是對原始資料的 Reference
                
                並且包含
                        -- 1. 指向 "原始資料的記憶體位址"
                        -- 2. 切片的長度

         也就是 借用 (Borrow) 原始資料的 "一部分"，因此 "不需要擁有 整個資料的所有權"


    8-2. 字串切片: 是指向字串中一部分資料的 Reference

                1. 型式: [開始索引值..結束索引值]

                        -- 開始索引值: 切片的起始位置
                        -- 結束索引值: 切片的終止位置的下一個索引值 (不包含該位置)

                示例:
                        1 | fn main() {
                        2 |     let s = String::from("hello world");
                        3 | 
                        4 |     let hello = &s[0..5];
                        5 |     let world = &s[6..11];
                        6 | }


                2. 語法糖: 根據上方的示例，如果切片範圍，有包含最前頭或最尾部，索引值可省略不寫

                示例 1: 包含最前頭，開始索引值省略不寫

                        1 | fn main() {
                        2 |     let s = String::from("hello world");
                        3 | 
                        4 |     let first_word = &s[0..5];   // 把 first_word 印出來，會是 hello
                        5 |     let first_word = &s[..5];    // 其結果印出，也一樣 hello
                        6 | }

                示例 2: 包含最尾部，結束索引值省略不寫

                        1 | fn main() {
                        2 |     let s = String::from("hello world");
                        3 |     let length = s.len();   // 字串 s 的長度
                        4 | 
                        5 |     let second_word = &s[6..length];   // 把 second_word 印出來，會是 world
                        6 |     let second_word = &s[6..];    // 其結果印出，也一樣 world
                        7 | }

                示例 3: 整個字串切片，兩者省略不寫

                        1 | fn main() {
                        2 |     let s = String::from("hello world");
                        3 |     let length = s.len();
                        4 | 
                        5 |     let whole = &s[0..length];   // 把 whole 印出來，會是 hello world
                        6 |     let whole = &s[..];    // 一樣會印出 hello world
                        7 | }
                

                3. 注意事項:
                        
                        -- 字串切片的範圍索引必須發生在有效的 UTF-8 範圍內
                        -- 如果嘗試從一個多字節的字元中創建 字串切片，
                                        程序會報錯並退出

                
                4. 示意圖: 使用第 1 點使用型式，其下方的示例程式碼表示
                
                圖示: 第一個是變數 s 指向的記憶體位址 ;
                      第二個變數 world 依照 s 的切片範圍，指向索引值 6 也就是字元 w
                
                                s
                        | name   |val |           | index |val|
                        |--------|----|           |-------|---|
                        | ptr    | ---|---------> |   0   | h |
                        |--------|----|           |-------|---|
                        | len    | 11 |           |   1   | e |
                        |--------|----|           |-------|---|
                        |capacity| 11 |           |   2   | l |
                        |--------|----|           |-------|---|
                                                  |   3   | l |
                            world                 |-------|---|
                        | name   |val |           |   4   | o |
                        |--------|----|           |-------|---|
                        | ptr    | ---|------     |   5   |   |
                        |--------|----|     |     |-------|---|
                        | len    | 5  |     |---> |   6   | w |
                        |--------|----|           |-------|---|
                                                  |   7   | o |
                                                  |-------|---|
                                                  |   8   | r |
                                                  |-------|---|
                                                  |   9   | l |
                                                  |-------|---|
                                                  |  10   | d |
                                                  |-------|---|

    8-3. 字串字面值的切片 & 作為函式參數

                8-3-1. 字串切片作為參數: 這邊宣告一個函式，把字串的第一個單字，作為返回值
                                                反之，若找不到則返回整個字串

                示例:

                        1 | fn first_word(s: &String) -> &str {
                        2 |     let bytes = s.as_bytes();
                        3 | 
                        4 |     for (i, &item) in bytes.iter().enumerate() {
                        5 |         if item == b' ' {
                        6 |             return &s[..i];
                        7 |         }
                        8 |     }
                        9 | 
                       10 |     &s[..]
                       11 | }

                8-3-2. 字串字面值作為參數

                示例:

                        1 | fn first_word(s: &str) -> &str {
                        2 |     let bytes = s.as_bytes();
                        3 | 
                        4 |     for (i, &item) in bytes.iter().enumerate() {
                        5 |         if item == b' ' {
                        6 |             return &s[..i];
                        7 |         }
                        8 |     }
                        9 | 
                       10 |     &s[..]
                       11 | }




