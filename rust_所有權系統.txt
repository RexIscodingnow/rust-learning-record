三、 Rust 的核心特性: 所有權    

1. 簡介: 所有程序在運行時，都必須管理 使用記憶體的方式

    1-1. 有些語言有 垃圾回收機制 (Garbage Collection)，它們會不斷尋找不再使用的記憶體
            ex: C#
    1-2. 而其他語言，必須 明確(手動) 分配與釋放記憶體
            ex: C/C++
    
    1-3. 不過 Rust 比較獨特，它讓 Rust 無需 Garbage Collection 就可以保證記憶體安全
         透過一個所有權系統來管理記憶體，其中包括一組編譯器在編譯時檢查的規則
         當程式執行時，所有權系統 "不會減慢運行速度"，因為 Rust 把這些工作提前到編譯時管理

2. Stack VS Heap

    2-1. Stack 介紹: 按順序接收資料儲存，按相反方向取出資料 (移除)
                        (特性: First In Last Out (簡稱: FILO)，先進後出)
            所有儲存在 Stack 上的資料必須是 "已知的固定大小"

    2-2. Heap 介紹: 編譯時，大小未知的資料，或是執行時資料大小會發生變化的，存放 Heap 上

            Heap 的記憶體組織性差一些，當資料放入 Heap 時會請求一定大小的空間
            當操作系統在 Heap 裡找到一個足夠大的空間，把它標記為在用，並返回一個指標，
            也就是 "記憶體位址" (學過 C/C++ 應該知道吧......)
            
            過程是在 Heap 上分配，稱為 "分配"

    2-3. 兩者比較

        2-3-1. Stack: 比 Heap 相對快得多
                由於 Stack 是已知固定大小，是 "分配"
                不過 指標 是已知固定大小，可以放入 Stack
                但是要 取得實際資料，必須用指標來取值

                因為操作系統不需要 尋找用來儲存新的資料的空間，只要從 Stack 頂端操作
        
        2-3-2. Heap: 分配空間，所需的工作較多
                而操作系統，需要先找到足夠大的空間來存放，並做好紀錄方便下次分配

    2-4. 存取資料
        
        2-4-1. 存取 Heap 比 Stack 慢，因為需要透過 指標 才能找到 Heap 中的資料
        2-4-2. 資料存取距離比較近，處理速度上會更快一些 (Stack)
        2-4-3. 反之，存放距離比較遠，速度上會慢一些 (Heap)
                    註: Heap 在分配大量的空間，也是需要時間

3. 所有權規則
    3-1. 每個值都有一個變數，這個變數是該值的所有者
    3-2. 每個值同時只能有一個所有者
    3-3. 當所有者 超出作用域 (scope) 時，該值將被刪除
                註: 作用域 (scope)，為 "變數的有效範圍"

4. String 類型

    4-1. String 比基本資料型別更複雜
    4-2. 字串字面值: 在程式裡手寫的字串值，它們是不可變的
    4-3. Rust 還有第二種字串類型: String
            在 Heap 上分配，能儲存在編譯時 "未知數量的文本"

    4-4. 宣告 String 類型的值
            4-4-1. 可以使用 from 函式從字串字面值，來宣告 String 類型
            
            示例:
                 1 | let s = String::from("hello world");    // :: 號表示 from 是 String 類型底下的函式
            
            4-4-2. 這類的 字串是可以被修改的




